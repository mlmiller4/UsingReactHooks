{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ML Miller\\\\Documents\\\\Training\\\\UsingReactHooks\\\\src\\\\ImageToggleOnScroll.js\";\nvar __jsx = React.createElement;\nimport React, { useRef, useEffect, useState } from 'react';\n\nconst ImageToggleOnScroll = ({\n  primaryImg,\n  secondaryImg\n}) => {\n  const imageRef = useRef(null);\n  useEffect(() => {\n    window.addEventListener(\"scroll\", scrollHandler);\n    setInView(isInView());\n    return () => {\n      window.removeEventListener(\"scroll\", scrollHandler);\n    };\n  });\n  const {\n    0: inView,\n    1: setInView\n  } = useState(false);\n\n  const isInView = () => {\n    if (imageRef.current) {\n      const rect = imageRef.current.getBoundingClientRect();\n      return rect.top >= 0 && rect.bottom <= window.innerHeight;\n    }\n\n    return false;\n  };\n\n  const scrollHandler = () => {\n    setInView(() => {\n      return isInView();\n    });\n  };\n\n  return __jsx(\"img\", {\n    src: inView ? secondaryImg : primaryImg,\n    alt: \"\",\n    ref: imageRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  });\n};\n\nexport default ImageToggleOnScroll;","map":{"version":3,"sources":["C:/Users/ML Miller/Documents/Training/UsingReactHooks/src/ImageToggleOnScroll.js"],"names":["React","useRef","useEffect","useState","ImageToggleOnScroll","primaryImg","secondaryImg","imageRef","window","addEventListener","scrollHandler","setInView","isInView","removeEventListener","inView","current","rect","getBoundingClientRect","top","bottom","innerHeight"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,EAAmCC,QAAnC,QAAmD,OAAnD;;AAEA,MAAMC,mBAAmB,GAAG,CAAC;AAAEC,EAAAA,UAAF;AAAcC,EAAAA;AAAd,CAAD,KAAkC;AAE1D,QAAMC,QAAQ,GAAGN,MAAM,CAAC,IAAD,CAAvB;AAGAC,EAAAA,SAAS,CAAC,MAAM;AACZM,IAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkCC,aAAlC;AACAC,IAAAA,SAAS,CAACC,QAAQ,EAAT,CAAT;AACA,WAAS,MAAM;AACXJ,MAAAA,MAAM,CAACK,mBAAP,CAA2B,QAA3B,EAAqCH,aAArC;AACH,KAFD;AAGH,GANQ,CAAT;AAQA,QAAM;AAAA,OAACI,MAAD;AAAA,OAASH;AAAT,MAAsBR,QAAQ,CAAC,KAAD,CAApC;;AAEA,QAAMS,QAAQ,GAAG,MAAM;AACnB,QAAIL,QAAQ,CAACQ,OAAb,EAAsB;AAClB,YAAMC,IAAI,GAAGT,QAAQ,CAACQ,OAAT,CAAiBE,qBAAjB,EAAb;AACA,aAAOD,IAAI,CAACE,GAAL,IAAY,CAAZ,IAAiBF,IAAI,CAACG,MAAL,IAAeX,MAAM,CAACY,WAA9C;AACH;;AACD,WAAO,KAAP;AACH,GAND;;AAQA,QAAMV,aAAa,GAAG,MAAM;AACxBC,IAAAA,SAAS,CAAC,MAAM;AACZ,aAAOC,QAAQ,EAAf;AACH,KAFQ,CAAT;AAGH,GAJD;;AAMA,SACI;AACI,IAAA,GAAG,EAAEE,MAAM,GAAGR,YAAH,GAAkBD,UADjC;AAEI,IAAA,GAAG,EAAC,EAFR;AAEW,IAAA,GAAG,EAAEE,QAFhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAMH,CAnCD;;AAqCA,eAAeH,mBAAf","sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\r\n\r\nconst ImageToggleOnScroll = ({ primaryImg, secondaryImg }) => {\r\n\r\n    const imageRef = useRef(null);\r\n    \r\n\r\n    useEffect(() => {\r\n        window.addEventListener(\"scroll\", scrollHandler);\r\n        setInView(isInView());\r\n        return ( () => {\r\n            window.removeEventListener(\"scroll\", scrollHandler);\r\n        });\r\n    });\r\n\r\n    const [inView, setInView] = useState(false);\r\n\r\n    const isInView = () => {\r\n        if (imageRef.current) {\r\n            const rect = imageRef.current.getBoundingClientRect();\r\n            return rect.top >= 0 && rect.bottom <= window.innerHeight;\r\n        }\r\n        return false;\r\n    };\r\n\r\n    const scrollHandler = () => {\r\n        setInView(() => {\r\n            return isInView();\r\n        });\r\n    };\r\n\r\n    return (\r\n        <img\r\n            src={inView ? secondaryImg : primaryImg}\r\n            alt=\"\" ref={imageRef}\r\n        />\r\n    );\r\n};\r\n\r\nexport default ImageToggleOnScroll;"]},"metadata":{},"sourceType":"module"}